---
type Props = {
  classes?: string

  percentComplete?: number
}
const { classes, percentComplete } = Astro.props
const percentCompleteValue =
  percentComplete != null ? `[--percent-complete:${percentComplete}]` : ''
console.log(percentCompleteValue)
---

<svg
  width="312"
  height="458"
  viewBox="0 0 312 458"
  fill="none"
  xmlns="http://www.w3.org/2000/svg"
  class:list={['stroke-zinc-200', classes, { animate: percentCompleteValue }]}
>
  <path
    d="M 2.33203 456.111 C 2.33203 451.813 4.56943 450.396 7.55925 450.23C11.534 450.009 11.7716 447.02 13.7874 444.5C14.8899 443.122 22.232 443.647 21.5 442C19.8927 438.384 18.2926 427.638 13.7874 426C12.5874 425.564 0.784893 420.313 4.83442 417.074C7.26497 415.129 17.2294 414.213 19 412C23.2768 406.654 26.8512 406.568 31.8603 401.559C36.1003 397.319 39.2213 394.223 45 392C46.8796 391.277 52.559 389.863 54.5 389C57.7968 387.535 54.8019 380.22 56 377C58.035 371.531 64.4354 372.149 67.5 367C69.2995 363.977 67.2366 355.164 71 354.5C74.9144 353.809 80.4995 358.297 83.5 346.5C85.2326 339.688 91.6781 345.91 92.6442 346.5C97.9722 348.344 101.561 343.71 107.154 342.558C110.134 341.945 113.168 336.249 115.5 334.384C117.607 332.698 124.191 321.472 125.5 319C131.021 308.571 126.627 311.551 131.011 300.462C132.447 296.829 134.324 291.408 137 289C137.55 288.505 143.499 282.156 145 279.5C151.5 268 147.587 270.408 150.974 260.924C152.224 257.424 153.043 244.675 149.997 241.45C146.342 237.58 148.616 236.126 153 235.5C156.42 235.011 161.878 235.449 161 231.5C160.048 227.218 158.01 224.122 158.481 219.885C158.888 216.224 166.2 214.253 168.991 213.824C173.41 213.144 185.759 211.302 189.5 209C195.446 205.341 203.965 202.186 207.5 196C209.722 192.112 209.231 185.303 213 183C220 185 222.337 176.663 225.5 173.5C230.386 168.614 233.47 170.414 240.504 170C243.427 169.828 245.253 162.526 245.565 160.5C246.225 156.204 238.5 157.5 239 154.5C239.5 151.5 241.394 147.219 242.784 145C244.73 140.683 241.744 136.405 242.784 133.024C243.931 129.298 242.784 125.009 242.784 121C242.784 116.638 243.494 114.63 241.783 110.781C240.195 107.209 239.447 100.803 239 97C240.375 87.0292 236.5 89.2468 236 85.5C235.5 81.7532 239.232 81.7532 242.061 81.7532C244.763 81.7532 248.462 83 251.5 83C253.435 83 260.557 77.6542 262 76.5C266.552 72.8583 266.893 70.607 271 66.5C273.228 64.2722 274.881 62.5473 276.372 59.7321C278.317 56.0582 280.543 55.4626 284.101 54.6717C287.218 53.9791 289.845 51.4042 290.552 48.2211C291.286 44.9185 294.074 43.8502 295.612 41.1588C297.021 38.693 303.583 37.9798 305 35.5C306.665 32.5861 304.731 29.5381 306.623 26.7006C308.515 23.863 307 22 309 18C311 14 309.833 5.33333 309 1.5"
    stroke-width="3"
    stroke-linecap="round"
    pathLength="1"></path>
</svg>

<style define:vars={{ 'percent-complete': percentComplete }}>
  .animate path {
    stroke-dasharray: 1;
    stroke-dashoffset: 0.95;
    animation: dash 6s cubic-bezier(0.77, 0, 0.175, 1) forwards;
  }
  @keyframes dash {
    from {
      stroke-dashoffset: 0.993;
    }
    to {
      stroke-dashoffset: var(--percent-complete);
    }
  }
</style>
